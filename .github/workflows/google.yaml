# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy Services to GKE

on:
  push:
    branches: [ "main" ]

env:
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_ZONE: ${{ vars.GKE_ZONE }}
  DEPLOYMENT_NAME: gke-test
  REPOSITORY: ${{ vars.REPOSITORY }}
  IMAGE: image
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services

    steps:
      - name: Checkout
        uses: actions/checkout@v3

#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: '17'
#          cache: maven
#
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml

      #      - name: 'Set up Cloud SDK'
      #        uses: 'google-github-actions/setup-gcloud@v1'
      #
      #      - name: 'Use gcloud CLI'
      #        run: 'gcloud info'

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'
          token_format: 'access_token'

      - name: Docker configuration
        run: |-
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: 'us-west1'

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            --build-arg SPRING_PROFILES_ACTIVE="$SPRING_PROFILES_ACTIVE" \
            --build-arg GCP_PROJECT_ID="$GCP_PROJECT_ID" \
            --build-arg GCP_CREDENTIALS="$GCP_CREDENTIALS" \
            --build-arg GCP_SQL_INSTANCE_CONNECTION_NAME="$GCP_SQL_INSTANCE_CONNECTION_NAME" \
            --build-arg GCP_SQL_DATABASE_NAME="$GCP_SQL_DATABASE_NAME" \
            --build-arg GCP_SQL_USERNAME="$GCP_SQL_USERNAME" \
            --build-arg GCP_SQL_PASSWORD="$GCP_SQL_PASSWORD" \
            --build-arg GCP_SQL_INSTANCE_CONNECTION_NAME="$GCP_SQL_INSTANCE_CONNECTION_NAME" \
            .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/GCP_PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
